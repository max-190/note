#!/usr/bin/env python3

from sys import argv
from os import path, listdir
import json

notes_file = "notes.json"

def initialise_notes() -> dict:
    return {"groups": [], "other": []}

def initialise_group(name: str) -> dict:
    return {"name": name, "notes": []}

def print_group(notes: dict, group_index: int) -> None:
    if group_index == len(notes["groups"]) + 1:
        print("Other notes:")
        for i, note in enumerate(notes["other"]):
            print(f"\t[{len(notes['groups']) + 1}.{i + 1}]: " + note)
    
    elif group_index <= len(notes["groups"]):
        print(f"[{group_index}]: {notes['groups'][group_index - 1]['name']}")
        for i, note in enumerate(notes["groups"][group_index - 1]["notes"]):
            print(f"\t[{group_index}.{i + 1}]: " + note)

def print_notes(notes: dict) -> None:
    if notes["groups"] == [] and notes["other"] == []:
        print("No notes to show.")
        return
    
    for i, group in enumerate(notes["groups"]):
        print_group(notes, i + 1)

    if notes["groups"] != []:
        print()
    
    if notes["other"] != []:
        print_group(notes, len(notes["groups"]) + 1)

 
def main() -> None:
    note_data = {}
    script_dir = path.dirname(path.realpath(__file__))
    if notes_file not in listdir(script_dir):
        print("'notes.json' not found, initialising Note...")
        with open(path.join(script_dir, notes_file), 'x') as f:
            f.write(json.dumps(initialise_notes(), indent=2))
        return
    else:
        with open(path.join(script_dir, notes_file), 'r') as f:
            note_data = json.load(f)
    
    if len(argv) == 1:
        print_notes(note_data)
        return
    
    if argv[1] == "group":
        if len(argv) == 2:
            raise Exception("No name for group added.")
        
        note_data["groups"].append(initialise_group(" ".join(argv[2:])))
    

    elif argv[1] == "rm":
        if len(argv) != 3:
            raise Exception("Wrong amount of arguments.")
        
        index = argv[2].split('.')

        if len(index) == 1:
            i = int(index[0])
            if i < 1 or i > len(note_data["groups"]) + 1:
                raise Exception("Invalid group index.")
            
            if i == len(note_data["groups"]) + 1:
                note_data["other"] = []
            
            else:
                note_data["groups"].pop(i - 1)
        elif len(index) == 2:
            i, j = int(index[0]), int(index[1])
            if i < 1 or i > len(note_data["groups"]) + 1:
                raise Exception("Invalid group index.")
            
            if j < 1 or (i == len(note_data["groups"]) + 1 and j > len(note_data["other"])) or (i <= len(note_data["groups"]) and j > len(note_data["groups"][i - 1])):
                raise Exception("Invalid note index.")
            
            if i == len(note_data["groups"]) + 1:
                note_data["other"].pop(j - 1)
            
            else:
                note_data["groups"][i - 1]["notes"].pop(j - 1)
        else:
            raise Exception("Invalid index.")

    elif argv[1].isnumeric():
        if len(argv) == 2:
            print_group(note_data, int(argv[1]))

        if (int(argv[1]) < 1 or int(argv[1]) > len(note_data["groups"])):
            raise Exception("Invalid group index.")
        
        note_data["groups"][int(argv[1]) - 1]["notes"].append(" ".join(argv[2:]))


    else:
        note_data["other"].append(" ".join(argv[1:]))
            
    
    notes_json = json.dumps(note_data, indent=2)
    # TODO: TACTOU maybe fix
    with open(path.join(script_dir, notes_file), 'w') as f:
        f.write(notes_json)



if __name__ == "__main__":
    # try:
        main()
    # except Exception as e:
    #     print(str(e))
