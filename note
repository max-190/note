#!/usr/bin/env python3

from sys import argv
from os import path, listdir
import json

notes_file = "notes.json"

def initialise_notes() -> dict:
    return {"groups": [{"name": "other", "notes": []}]}

def initialise_group(name: str) -> dict:
    return {"name": name, "notes": []}

def print_group(notes: dict, group_index: int) -> None:
    if group_index == 0:
        print("Other notes:")
        for i, note in enumerate(notes["groups"][0]["notes"]):
            print(f"\t[0.{i + 1}]: " + note)
    
    elif group_index <= len(notes["groups"]):
        print(f"[{group_index}]: {notes['groups'][group_index]['name']}")
        for i, note in enumerate(notes["groups"][group_index]["notes"]):
            print(f"\t[{group_index}.{i + 1}]: " + note)

def print_just_groups(notes: dict) -> None:
    note_counter = 0
    for i, group in enumerate(notes["groups"][1:]):
        num_notes = len(group['notes'])
        note_counter += num_notes
        print(f"[{i + 1}]: {group['name']}, ".ljust(30, " ") + f"with {str(num_notes)} notes.")

    other_notes_count = len(notes['groups'][0]['notes'])
    if (other_notes_count > 0):
        print("[0]: Other notes, ".ljust(30, " ") + f"with {str(other_notes_count)} notes.")
    
    print(f"In total: {str(note_counter)} note(s) in {str(len(notes['groups']))} group(s), with {str(other_notes_count)} other note(s).")


def print_notes(notes: dict) -> None:
    if len(notes["groups"]) == 1 and notes["groups"][0]["notes"] == []:
        print("No notes to show.")
        return
    
    for i in range(1, len(notes["groups"])):
        print_group(notes, i)

    if len(notes["groups"]) != 1:
        print()
    
    if notes["groups"][0]["notes"] != []:
        print_group(notes, 0)

 
def main() -> None:
    note_data = {}
    script_dir = path.dirname(path.realpath(__file__))
    if notes_file not in listdir(script_dir):
        print("'notes.json' not found, initialising Note...")
        with open(path.join(script_dir, notes_file), 'x') as f:
            f.write(json.dumps(initialise_notes(), indent=2))
        return
    else:
        with open(path.join(script_dir, notes_file), 'r') as f:
            note_data = json.load(f)
    
    if len(argv) == 1:
        print_notes(note_data)
        return
    
    if argv[1] == "group":
        if len(argv) == 2:
            raise Exception("No name for group added.")
        
        note_data["groups"].append(initialise_group(" ".join(argv[2:])))
    
    elif argv[1] == "groups": # TODO: maybe too similar?
        print_just_groups(note_data)
        return
    
    elif argv[1] == "rm":
        if len(argv) != 3:
            raise Exception("Wrong amount of arguments.")
        
        index = argv[2].split('.')

        if len(index) == 1:
            i = int(index[0])
            if i < 0 or i > len(note_data["groups"]) - 1:
                raise Exception("Invalid group index.")
            
            if i == 0:
                note_data["groups"][0]["notes"] = []
            
            else:
                note_data["groups"].pop(i)
        
        elif len(index) == 2:
            i, j = int(index[0]), int(index[1])
            if i < 0 or i > len(note_data["groups"]) - 1:
                raise Exception("Invalid group index.")
            
            if j < 1 or j > len(note_data["groups"][i]["notes"]):
                raise Exception("Invalid note index.")
            
            note_data["groups"][i]["notes"].pop(j - 1)
            
        else:
            raise Exception("Invalid index.")

    elif argv[1].isnumeric():
        if len(argv) == 2:
            print_group(note_data, int(argv[1]))

        if int(argv[1]) < 0 or int(argv[1]) > len(note_data["groups"]) - 1:
            raise Exception("Invalid group index.")
        
        note_data["groups"][int(argv[1])]["notes"].append(" ".join(argv[2:]))


    else:
        note_data["groups"][0]["notes"].append(" ".join(argv[1:]))
            
    
    notes_json = json.dumps(note_data, indent=2)
    # TODO: TACTOU maybe fix
    with open(path.join(script_dir, notes_file), 'w') as f:
        f.write(notes_json)



if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(str(e))
